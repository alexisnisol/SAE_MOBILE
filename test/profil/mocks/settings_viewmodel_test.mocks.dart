// Mocks generated by Mockito 5.4.5 from annotations
// in sae_mobile/test/profil/mocks/settings_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sae_mobile/repository/settings_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i2.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic saveSettingsTheme(bool? value) =>
      super.noSuchMethod(Invocation.method(#saveSettingsTheme, [value]));

  @override
  _i3.Future<bool> getSettingsTheme() => (super.noSuchMethod(
        Invocation.method(#getSettingsTheme, []),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  dynamic saveSettingsGeolocation(bool? value) =>
      super.noSuchMethod(Invocation.method(#saveSettingsGeolocation, [value]));

  @override
  _i3.Future<bool> getSettingsGeolocation() => (super.noSuchMethod(
        Invocation.method(#getSettingsGeolocation, []),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
